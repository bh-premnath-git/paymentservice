services:
  payment-service:
    build:
      context: .
      dockerfile: ./app/Dockerfile
      target: development
    ports:
      - "8000:8000"  # FastAPI HTTP
      - "50051:50051"  # gRPC
    env_file:
      - .env
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - DATABASE_URL=${DATABASE_URL}
      - REQUESTOR_BASE_URL=${REQUESTOR_BASE_URL}
      - REQUESTOR_MODE=${REQUESTOR_MODE}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - LOG_LEVEL=${LOG_LEVEL}
      - REDIS_URL=${REDIS_URL}
      - ENABLE_MTLS=${ENABLE_MTLS}
      - ENABLE_AUTH_INTERCEPTOR=${ENABLE_AUTH_INTERCEPTOR}
    depends_on:
      postgres:
        condition: service_healthy
    # volumes: # Removed - let Dockerfile handle file copying
    networks:
      - payment-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  requestor-mock:
    build:
      context: .
      dockerfile: ./sandbox/requestor_mock/Dockerfile
    ports:
      - "8001:8001"
    env_file:
      - .env
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      payment-service:
        condition: service_healthy
    networks:
      - payment-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  postgres:
    image: postgres:13.22-alpine3.21
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-payment_db}
      POSTGRES_USER: ${POSTGRES_USER:-payment}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-payment}
      POSTGRES_INITDB_ARGS: ${POSTGRES_INITDB_ARGS:---encoding=UTF-8 --lc-collate=C --lc-ctype=C}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts:/docker-entrypoint-initdb.d
    networks:
      - payment-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-payment} -d ${POSTGRES_DB:-payment_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:alpine3.22
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - payment-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  grpcui:
    image: fullstorydev/grpcui:latest
    ports:
      - "8080:8080"
    command:
      - -plaintext
      - -bind=0.0.0.0
      - -port=8080
      - payment-service:50051
    depends_on:
      payment-service:
        condition: service_healthy
    networks:
      - payment-network
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  payment-network:
    driver: bridge
